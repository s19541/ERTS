/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { ClientBase } from './ClientBase';
import moment from 'moment';

export class LeagueClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    get(leagueId: number, signal?: AbortSignal | undefined): Promise<LeagueDto | null> {
        let url_ = this.baseUrl + "/api/League/Get/{leagueId}";
        if (leagueId === undefined || leagueId === null)
            throw new Error("The parameter 'leagueId' must be defined.");
        url_ = url_.replace("{leagueId}", encodeURIComponent("" + leagueId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGet(_response));
        });
    }

    protected processGet(response: Response): Promise<LeagueDto | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LeagueDto.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LeagueDto | null>(<any>null);
    }

    getLeagueImages(gameType: string | null, signal?: AbortSignal | undefined): Promise<LeagueImageDto[] | null> {
        let url_ = this.baseUrl + "/api/League/GetLeagueImages/{gameType}";
        if (gameType === undefined || gameType === null)
            throw new Error("The parameter 'gameType' must be defined.");
        url_ = url_.replace("{gameType}", encodeURIComponent("" + gameType));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetLeagueImages(_response));
        });
    }

    protected processGetLeagueImages(response: Response): Promise<LeagueImageDto[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LeagueImageDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LeagueImageDto[] | null>(<any>null);
    }
}

export class MatchClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    getMatches(tournamentId: number, signal?: AbortSignal | undefined): Promise<MatchDto[] | null> {
        let url_ = this.baseUrl + "/api/Match/GetMatches/{tournamentId}";
        if (tournamentId === undefined || tournamentId === null)
            throw new Error("The parameter 'tournamentId' must be defined.");
        url_ = url_.replace("{tournamentId}", encodeURIComponent("" + tournamentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetMatches(_response));
        });
    }

    protected processGetMatches(response: Response): Promise<MatchDto[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MatchDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MatchDto[] | null>(<any>null);
    }

    getMatch(matchId: number, signal?: AbortSignal | undefined): Promise<MatchDto | null> {
        let url_ = this.baseUrl + "/api/Match/GetMatch/{matchId}";
        if (matchId === undefined || matchId === null)
            throw new Error("The parameter 'matchId' must be defined.");
        url_ = url_.replace("{matchId}", encodeURIComponent("" + matchId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetMatch(_response));
        });
    }

    protected processGetMatch(response: Response): Promise<MatchDto | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MatchDto.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MatchDto | null>(<any>null);
    }
}

export class SerieClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    getSeriesShort(leagueId: number, signal?: AbortSignal | undefined): Promise<SerieShortDto[] | null> {
        let url_ = this.baseUrl + "/api/Serie/GetSeriesShort/{leagueId}";
        if (leagueId === undefined || leagueId === null)
            throw new Error("The parameter 'leagueId' must be defined.");
        url_ = url_.replace("{leagueId}", encodeURIComponent("" + leagueId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetSeriesShort(_response));
        });
    }

    protected processGetSeriesShort(response: Response): Promise<SerieShortDto[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SerieShortDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SerieShortDto[] | null>(<any>null);
    }
}

export class TournamentClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    getTournamentsShort(serieId: number, signal?: AbortSignal | undefined): Promise<TournamentShortDto[] | null> {
        let url_ = this.baseUrl + "/api/Tournament/GetTournamentsShort/{serieId}";
        if (serieId === undefined || serieId === null)
            throw new Error("The parameter 'serieId' must be defined.");
        url_ = url_.replace("{serieId}", encodeURIComponent("" + serieId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetTournamentsShort(_response));
        });
    }

    protected processGetTournamentsShort(response: Response): Promise<TournamentShortDto[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TournamentShortDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TournamentShortDto[] | null>(<any>null);
    }

    getTournamentTeamsShort(tournamentId: number, signal?: AbortSignal | undefined): Promise<TournamentTeamShortDto[] | null> {
        let url_ = this.baseUrl + "/api/Tournament/GetTournamentTeamsShort/{tournamentId}";
        if (tournamentId === undefined || tournamentId === null)
            throw new Error("The parameter 'tournamentId' must be defined.");
        url_ = url_.replace("{tournamentId}", encodeURIComponent("" + tournamentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetTournamentTeamsShort(_response));
        });
    }

    protected processGetTournamentTeamsShort(response: Response): Promise<TournamentTeamShortDto[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TournamentTeamShortDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TournamentTeamShortDto[] | null>(<any>null);
    }

    getLolTournamentPlayerStats(tournamentId: number, signal?: AbortSignal | undefined): Promise<LolTournamentPlayerStatsDto[] | null> {
        let url_ = this.baseUrl + "/api/Tournament/GetLolTournamentPlayerStats/{tournamentId}";
        if (tournamentId === undefined || tournamentId === null)
            throw new Error("The parameter 'tournamentId' must be defined.");
        url_ = url_.replace("{tournamentId}", encodeURIComponent("" + tournamentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetLolTournamentPlayerStats(_response));
        });
    }

    protected processGetLolTournamentPlayerStats(response: Response): Promise<LolTournamentPlayerStatsDto[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LolTournamentPlayerStatsDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LolTournamentPlayerStatsDto[] | null>(<any>null);
    }

    getLolTournamentTeamStats(tournamentId: number, signal?: AbortSignal | undefined): Promise<LolTournamentTeamStatsDto[] | null> {
        let url_ = this.baseUrl + "/api/Tournament/GetLolTournamentTeamStats/{tournamentId}";
        if (tournamentId === undefined || tournamentId === null)
            throw new Error("The parameter 'tournamentId' must be defined.");
        url_ = url_.replace("{tournamentId}", encodeURIComponent("" + tournamentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetLolTournamentTeamStats(_response));
        });
    }

    protected processGetLolTournamentTeamStats(response: Response): Promise<LolTournamentTeamStatsDto[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LolTournamentTeamStatsDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LolTournamentTeamStatsDto[] | null>(<any>null);
    }
}

export class LeagueDto implements ILeagueDto {
    name!: string | undefined;
    imageUrl!: string | undefined;
    url!: string | undefined;

    constructor(data?: ILeagueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.imageUrl = _data["imageUrl"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): LeagueDto {
        data = typeof data === 'object' ? data : {};
        let result = new LeagueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["imageUrl"] = this.imageUrl;
        data["url"] = this.url;
        return data; 
    }
}

export interface ILeagueDto {
    name: string | undefined;
    imageUrl: string | undefined;
    url: string | undefined;
}

export class LeagueImageDto implements ILeagueImageDto {
    id!: number;
    imageUrl!: string | undefined;

    constructor(data?: ILeagueImageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.imageUrl = _data["imageUrl"];
        }
    }

    static fromJS(data: any): LeagueImageDto {
        data = typeof data === 'object' ? data : {};
        let result = new LeagueImageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["imageUrl"] = this.imageUrl;
        return data; 
    }
}

export interface ILeagueImageDto {
    id: number;
    imageUrl: string | undefined;
}

export class MatchDto implements IMatchDto {
    id!: number;
    team1Id!: number;
    team2Id!: number;
    team1ImageUrl!: string | undefined;
    team2ImageUrl!: string | undefined;
    team1Acronym!: string | undefined;
    team2Acronym!: string | undefined;
    team1Name!: string | undefined;
    team2Name!: string | undefined;
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;
    team1GamesWon!: number;
    team2GamesWon!: number;
    streamUrl!: string | undefined;
    games!: LolGameShortStatsDto[] | undefined;

    constructor(data?: IMatchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.team1Id = _data["team1Id"];
            this.team2Id = _data["team2Id"];
            this.team1ImageUrl = _data["team1ImageUrl"];
            this.team2ImageUrl = _data["team2ImageUrl"];
            this.team1Acronym = _data["team1Acronym"];
            this.team2Acronym = _data["team2Acronym"];
            this.team1Name = _data["team1Name"];
            this.team2Name = _data["team2Name"];
            this.startTime = _data["startTime"] ? moment(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? moment(_data["endTime"].toString()) : <any>undefined;
            this.team1GamesWon = _data["team1GamesWon"];
            this.team2GamesWon = _data["team2GamesWon"];
            this.streamUrl = _data["streamUrl"];
            if (Array.isArray(_data["games"])) {
                this.games = [] as any;
                for (let item of _data["games"])
                    this.games!.push(LolGameShortStatsDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MatchDto {
        data = typeof data === 'object' ? data : {};
        let result = new MatchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["team1Id"] = this.team1Id;
        data["team2Id"] = this.team2Id;
        data["team1ImageUrl"] = this.team1ImageUrl;
        data["team2ImageUrl"] = this.team2ImageUrl;
        data["team1Acronym"] = this.team1Acronym;
        data["team2Acronym"] = this.team2Acronym;
        data["team1Name"] = this.team1Name;
        data["team2Name"] = this.team2Name;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["team1GamesWon"] = this.team1GamesWon;
        data["team2GamesWon"] = this.team2GamesWon;
        data["streamUrl"] = this.streamUrl;
        if (Array.isArray(this.games)) {
            data["games"] = [];
            for (let item of this.games)
                data["games"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMatchDto {
    id: number;
    team1Id: number;
    team2Id: number;
    team1ImageUrl: string | undefined;
    team2ImageUrl: string | undefined;
    team1Acronym: string | undefined;
    team2Acronym: string | undefined;
    team1Name: string | undefined;
    team2Name: string | undefined;
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
    team1GamesWon: number;
    team2GamesWon: number;
    streamUrl: string | undefined;
    games: LolGameShortStatsDto[] | undefined;
}

export class LolGameShortStatsDto implements ILolGameShortStatsDto {
    startTime!: moment.Moment;
    gameLength!: string | undefined;
    winnerTeamId!: number;
    blueTeamid!: number;
    blueTeamStats!: LolGameTeamShortStatsDto | undefined;
    redTeamStats!: LolGameTeamShortStatsDto | undefined;
    blueTeamPlayersStats!: LolGamePlayerShortStatsDto[] | undefined;
    redTeamPlayersStats!: LolGamePlayerShortStatsDto[] | undefined;

    constructor(data?: ILolGameShortStatsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startTime = _data["startTime"] ? moment(_data["startTime"].toString()) : <any>undefined;
            this.gameLength = _data["gameLength"];
            this.winnerTeamId = _data["winnerTeamId"];
            this.blueTeamid = _data["blueTeamid"];
            this.blueTeamStats = _data["blueTeamStats"] ? LolGameTeamShortStatsDto.fromJS(_data["blueTeamStats"]) : <any>undefined;
            this.redTeamStats = _data["redTeamStats"] ? LolGameTeamShortStatsDto.fromJS(_data["redTeamStats"]) : <any>undefined;
            if (Array.isArray(_data["blueTeamPlayersStats"])) {
                this.blueTeamPlayersStats = [] as any;
                for (let item of _data["blueTeamPlayersStats"])
                    this.blueTeamPlayersStats!.push(LolGamePlayerShortStatsDto.fromJS(item));
            }
            if (Array.isArray(_data["redTeamPlayersStats"])) {
                this.redTeamPlayersStats = [] as any;
                for (let item of _data["redTeamPlayersStats"])
                    this.redTeamPlayersStats!.push(LolGamePlayerShortStatsDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LolGameShortStatsDto {
        data = typeof data === 'object' ? data : {};
        let result = new LolGameShortStatsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["gameLength"] = this.gameLength;
        data["winnerTeamId"] = this.winnerTeamId;
        data["blueTeamid"] = this.blueTeamid;
        data["blueTeamStats"] = this.blueTeamStats ? this.blueTeamStats.toJSON() : <any>undefined;
        data["redTeamStats"] = this.redTeamStats ? this.redTeamStats.toJSON() : <any>undefined;
        if (Array.isArray(this.blueTeamPlayersStats)) {
            data["blueTeamPlayersStats"] = [];
            for (let item of this.blueTeamPlayersStats)
                data["blueTeamPlayersStats"].push(item.toJSON());
        }
        if (Array.isArray(this.redTeamPlayersStats)) {
            data["redTeamPlayersStats"] = [];
            for (let item of this.redTeamPlayersStats)
                data["redTeamPlayersStats"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILolGameShortStatsDto {
    startTime: moment.Moment;
    gameLength: string | undefined;
    winnerTeamId: number;
    blueTeamid: number;
    blueTeamStats: LolGameTeamShortStatsDto | undefined;
    redTeamStats: LolGameTeamShortStatsDto | undefined;
    blueTeamPlayersStats: LolGamePlayerShortStatsDto[] | undefined;
    redTeamPlayersStats: LolGamePlayerShortStatsDto[] | undefined;
}

export class LolGameTeamShortStatsDto implements ILolGameTeamShortStatsDto {
    teamId!: number;
    baronKilled!: number;
    mountainDrakeKilled!: number;
    infernalDrakeKilled!: number;
    oceanDrakeKilled!: number;
    cloudDrakeKilled!: number;
    elderDrakeKilled!: number;
    heraldKilled!: number;
    goldEarned!: number;
    kills!: number;
    turretDestroyed!: number;
    inhibitorDestroyed!: number;
    ban1ImageUrl!: string | undefined;
    ban2ImageUrl!: string | undefined;
    ban3ImageUrl!: string | undefined;
    ban4ImageUrl!: string | undefined;
    ban5ImageUrl!: string | undefined;

    constructor(data?: ILolGameTeamShortStatsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.teamId = _data["teamId"];
            this.baronKilled = _data["baronKilled"];
            this.mountainDrakeKilled = _data["mountainDrakeKilled"];
            this.infernalDrakeKilled = _data["infernalDrakeKilled"];
            this.oceanDrakeKilled = _data["oceanDrakeKilled"];
            this.cloudDrakeKilled = _data["cloudDrakeKilled"];
            this.elderDrakeKilled = _data["elderDrakeKilled"];
            this.heraldKilled = _data["heraldKilled"];
            this.goldEarned = _data["goldEarned"];
            this.kills = _data["kills"];
            this.turretDestroyed = _data["turretDestroyed"];
            this.inhibitorDestroyed = _data["inhibitorDestroyed"];
            this.ban1ImageUrl = _data["ban1ImageUrl"];
            this.ban2ImageUrl = _data["ban2ImageUrl"];
            this.ban3ImageUrl = _data["ban3ImageUrl"];
            this.ban4ImageUrl = _data["ban4ImageUrl"];
            this.ban5ImageUrl = _data["ban5ImageUrl"];
        }
    }

    static fromJS(data: any): LolGameTeamShortStatsDto {
        data = typeof data === 'object' ? data : {};
        let result = new LolGameTeamShortStatsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["teamId"] = this.teamId;
        data["baronKilled"] = this.baronKilled;
        data["mountainDrakeKilled"] = this.mountainDrakeKilled;
        data["infernalDrakeKilled"] = this.infernalDrakeKilled;
        data["oceanDrakeKilled"] = this.oceanDrakeKilled;
        data["cloudDrakeKilled"] = this.cloudDrakeKilled;
        data["elderDrakeKilled"] = this.elderDrakeKilled;
        data["heraldKilled"] = this.heraldKilled;
        data["goldEarned"] = this.goldEarned;
        data["kills"] = this.kills;
        data["turretDestroyed"] = this.turretDestroyed;
        data["inhibitorDestroyed"] = this.inhibitorDestroyed;
        data["ban1ImageUrl"] = this.ban1ImageUrl;
        data["ban2ImageUrl"] = this.ban2ImageUrl;
        data["ban3ImageUrl"] = this.ban3ImageUrl;
        data["ban4ImageUrl"] = this.ban4ImageUrl;
        data["ban5ImageUrl"] = this.ban5ImageUrl;
        return data; 
    }
}

export interface ILolGameTeamShortStatsDto {
    teamId: number;
    baronKilled: number;
    mountainDrakeKilled: number;
    infernalDrakeKilled: number;
    oceanDrakeKilled: number;
    cloudDrakeKilled: number;
    elderDrakeKilled: number;
    heraldKilled: number;
    goldEarned: number;
    kills: number;
    turretDestroyed: number;
    inhibitorDestroyed: number;
    ban1ImageUrl: string | undefined;
    ban2ImageUrl: string | undefined;
    ban3ImageUrl: string | undefined;
    ban4ImageUrl: string | undefined;
    ban5ImageUrl: string | undefined;
}

export class LolGamePlayerShortStatsDto implements ILolGamePlayerShortStatsDto {
    teamId!: number;
    playerNick!: string | undefined;
    role!: LolRole;
    championImageUrl!: string | undefined;
    kills!: number;
    deaths!: number;
    assists!: number;
    goldEarned!: number;
    cs!: number;
    spell1ImageUrl!: string | undefined;
    spell2ImageUrl!: string | undefined;
    itemImages!: string[] | undefined;

    constructor(data?: ILolGamePlayerShortStatsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.teamId = _data["teamId"];
            this.playerNick = _data["playerNick"];
            this.role = _data["role"];
            this.championImageUrl = _data["championImageUrl"];
            this.kills = _data["kills"];
            this.deaths = _data["deaths"];
            this.assists = _data["assists"];
            this.goldEarned = _data["goldEarned"];
            this.cs = _data["cs"];
            this.spell1ImageUrl = _data["spell1ImageUrl"];
            this.spell2ImageUrl = _data["spell2ImageUrl"];
            if (Array.isArray(_data["itemImages"])) {
                this.itemImages = [] as any;
                for (let item of _data["itemImages"])
                    this.itemImages!.push(item);
            }
        }
    }

    static fromJS(data: any): LolGamePlayerShortStatsDto {
        data = typeof data === 'object' ? data : {};
        let result = new LolGamePlayerShortStatsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["teamId"] = this.teamId;
        data["playerNick"] = this.playerNick;
        data["role"] = this.role;
        data["championImageUrl"] = this.championImageUrl;
        data["kills"] = this.kills;
        data["deaths"] = this.deaths;
        data["assists"] = this.assists;
        data["goldEarned"] = this.goldEarned;
        data["cs"] = this.cs;
        data["spell1ImageUrl"] = this.spell1ImageUrl;
        data["spell2ImageUrl"] = this.spell2ImageUrl;
        if (Array.isArray(this.itemImages)) {
            data["itemImages"] = [];
            for (let item of this.itemImages)
                data["itemImages"].push(item);
        }
        return data; 
    }
}

export interface ILolGamePlayerShortStatsDto {
    teamId: number;
    playerNick: string | undefined;
    role: LolRole;
    championImageUrl: string | undefined;
    kills: number;
    deaths: number;
    assists: number;
    goldEarned: number;
    cs: number;
    spell1ImageUrl: string | undefined;
    spell2ImageUrl: string | undefined;
    itemImages: string[] | undefined;
}

export enum LolRole {
    Top = "top",
    Jun = "jun",
    Mid = "mid",
    Adc = "adc",
    Sup = "sup",
}

export class SerieShortDto implements ISerieShortDto {
    id!: number;
    name!: string | undefined;
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;

    constructor(data?: ISerieShortDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.startTime = _data["startTime"] ? moment(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? moment(_data["endTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SerieShortDto {
        data = typeof data === 'object' ? data : {};
        let result = new SerieShortDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ISerieShortDto {
    id: number;
    name: string | undefined;
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
}

export class TournamentShortDto implements ITournamentShortDto {
    id!: number;
    name!: string | undefined;
    startTime!: moment.Moment | undefined;
    endTime!: moment.Moment | undefined;

    constructor(data?: ITournamentShortDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.startTime = _data["startTime"] ? moment(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? moment(_data["endTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TournamentShortDto {
        data = typeof data === 'object' ? data : {};
        let result = new TournamentShortDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ITournamentShortDto {
    id: number;
    name: string | undefined;
    startTime: moment.Moment | undefined;
    endTime: moment.Moment | undefined;
}

export class TournamentTeamShortDto implements ITournamentTeamShortDto {
    matchesWon!: number;
    matchesLost!: number;
    gamesWon!: number;
    gamesLost!: number;
    teamName!: string | undefined;
    teamImageUrl!: string | undefined;

    constructor(data?: ITournamentTeamShortDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.matchesWon = _data["matchesWon"];
            this.matchesLost = _data["matchesLost"];
            this.gamesWon = _data["gamesWon"];
            this.gamesLost = _data["gamesLost"];
            this.teamName = _data["teamName"];
            this.teamImageUrl = _data["teamImageUrl"];
        }
    }

    static fromJS(data: any): TournamentTeamShortDto {
        data = typeof data === 'object' ? data : {};
        let result = new TournamentTeamShortDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["matchesWon"] = this.matchesWon;
        data["matchesLost"] = this.matchesLost;
        data["gamesWon"] = this.gamesWon;
        data["gamesLost"] = this.gamesLost;
        data["teamName"] = this.teamName;
        data["teamImageUrl"] = this.teamImageUrl;
        return data; 
    }
}

export interface ITournamentTeamShortDto {
    matchesWon: number;
    matchesLost: number;
    gamesWon: number;
    gamesLost: number;
    teamName: string | undefined;
    teamImageUrl: string | undefined;
}

export class LolTournamentPlayerStatsDto implements ILolTournamentPlayerStatsDto {
    playerNick!: string | undefined;
    teamImageUrl!: string | undefined;
    kills!: number | undefined;
    deaths!: number | undefined;
    assists!: number | undefined;
    kda!: string | undefined;
    cs!: number | undefined;
    csPerMinute!: number | undefined;
    gold!: number | undefined;
    goldPerMinute!: number | undefined;
    damageShare!: string | undefined;
    killParticipation!: string | undefined;
    championsPlayed!: number;
    firstRecentChampionImageUrl!: string | undefined;
    secondRecentChampionImageUrl!: string | undefined;
    thirdRecentChampionImageUrl!: string | undefined;

    constructor(data?: ILolTournamentPlayerStatsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.playerNick = _data["playerNick"];
            this.teamImageUrl = _data["teamImageUrl"];
            this.kills = _data["kills"];
            this.deaths = _data["deaths"];
            this.assists = _data["assists"];
            this.kda = _data["kda"];
            this.cs = _data["cs"];
            this.csPerMinute = _data["csPerMinute"];
            this.gold = _data["gold"];
            this.goldPerMinute = _data["goldPerMinute"];
            this.damageShare = _data["damageShare"];
            this.killParticipation = _data["killParticipation"];
            this.championsPlayed = _data["championsPlayed"];
            this.firstRecentChampionImageUrl = _data["firstRecentChampionImageUrl"];
            this.secondRecentChampionImageUrl = _data["secondRecentChampionImageUrl"];
            this.thirdRecentChampionImageUrl = _data["thirdRecentChampionImageUrl"];
        }
    }

    static fromJS(data: any): LolTournamentPlayerStatsDto {
        data = typeof data === 'object' ? data : {};
        let result = new LolTournamentPlayerStatsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["playerNick"] = this.playerNick;
        data["teamImageUrl"] = this.teamImageUrl;
        data["kills"] = this.kills;
        data["deaths"] = this.deaths;
        data["assists"] = this.assists;
        data["kda"] = this.kda;
        data["cs"] = this.cs;
        data["csPerMinute"] = this.csPerMinute;
        data["gold"] = this.gold;
        data["goldPerMinute"] = this.goldPerMinute;
        data["damageShare"] = this.damageShare;
        data["killParticipation"] = this.killParticipation;
        data["championsPlayed"] = this.championsPlayed;
        data["firstRecentChampionImageUrl"] = this.firstRecentChampionImageUrl;
        data["secondRecentChampionImageUrl"] = this.secondRecentChampionImageUrl;
        data["thirdRecentChampionImageUrl"] = this.thirdRecentChampionImageUrl;
        return data; 
    }
}

export interface ILolTournamentPlayerStatsDto {
    playerNick: string | undefined;
    teamImageUrl: string | undefined;
    kills: number | undefined;
    deaths: number | undefined;
    assists: number | undefined;
    kda: string | undefined;
    cs: number | undefined;
    csPerMinute: number | undefined;
    gold: number | undefined;
    goldPerMinute: number | undefined;
    damageShare: string | undefined;
    killParticipation: string | undefined;
    championsPlayed: number;
    firstRecentChampionImageUrl: string | undefined;
    secondRecentChampionImageUrl: string | undefined;
    thirdRecentChampionImageUrl: string | undefined;
}

export class LolTournamentTeamStatsDto implements ILolTournamentTeamStatsDto {
    teamName!: string | undefined;
    teamImageUrl!: string | undefined;
    kills!: number | undefined;
    assists!: number | undefined;
    deaths!: number | undefined;
    gold!: number | undefined;
    dragons!: number | undefined;
    heralds!: number | undefined;
    barons!: number | undefined;
    towers!: number | undefined;
    firstRecentChampionImageUrl!: string | undefined;
    secondRecentChampionImageUrl!: string | undefined;
    thirdRecentChampionImageUrl!: string | undefined;
    fourthRecentChampionImageUrl!: string | undefined;
    fivethRecentChampionImageUrl!: string | undefined;

    constructor(data?: ILolTournamentTeamStatsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.teamName = _data["teamName"];
            this.teamImageUrl = _data["teamImageUrl"];
            this.kills = _data["kills"];
            this.assists = _data["assists"];
            this.deaths = _data["deaths"];
            this.gold = _data["gold"];
            this.dragons = _data["dragons"];
            this.heralds = _data["heralds"];
            this.barons = _data["barons"];
            this.towers = _data["towers"];
            this.firstRecentChampionImageUrl = _data["firstRecentChampionImageUrl"];
            this.secondRecentChampionImageUrl = _data["secondRecentChampionImageUrl"];
            this.thirdRecentChampionImageUrl = _data["thirdRecentChampionImageUrl"];
            this.fourthRecentChampionImageUrl = _data["fourthRecentChampionImageUrl"];
            this.fivethRecentChampionImageUrl = _data["fivethRecentChampionImageUrl"];
        }
    }

    static fromJS(data: any): LolTournamentTeamStatsDto {
        data = typeof data === 'object' ? data : {};
        let result = new LolTournamentTeamStatsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["teamName"] = this.teamName;
        data["teamImageUrl"] = this.teamImageUrl;
        data["kills"] = this.kills;
        data["assists"] = this.assists;
        data["deaths"] = this.deaths;
        data["gold"] = this.gold;
        data["dragons"] = this.dragons;
        data["heralds"] = this.heralds;
        data["barons"] = this.barons;
        data["towers"] = this.towers;
        data["firstRecentChampionImageUrl"] = this.firstRecentChampionImageUrl;
        data["secondRecentChampionImageUrl"] = this.secondRecentChampionImageUrl;
        data["thirdRecentChampionImageUrl"] = this.thirdRecentChampionImageUrl;
        data["fourthRecentChampionImageUrl"] = this.fourthRecentChampionImageUrl;
        data["fivethRecentChampionImageUrl"] = this.fivethRecentChampionImageUrl;
        return data; 
    }
}

export interface ILolTournamentTeamStatsDto {
    teamName: string | undefined;
    teamImageUrl: string | undefined;
    kills: number | undefined;
    assists: number | undefined;
    deaths: number | undefined;
    gold: number | undefined;
    dragons: number | undefined;
    heralds: number | undefined;
    barons: number | undefined;
    towers: number | undefined;
    firstRecentChampionImageUrl: string | undefined;
    secondRecentChampionImageUrl: string | undefined;
    thirdRecentChampionImageUrl: string | undefined;
    fourthRecentChampionImageUrl: string | undefined;
    fivethRecentChampionImageUrl: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new SwaggerException(message, status, response, headers, result);
}